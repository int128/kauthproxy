// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/kauthproxy/pkg/adaptors/network (interfaces: Interface)

// Package mock_network is a generated GoMock package.
package mock_network

import (
	gomock "github.com/golang/mock/gomock"
	rest "k8s.io/client-go/rest"
	http "net/http"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AllocateLocalPort mocks base method
func (m *MockInterface) AllocateLocalPort() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateLocalPort")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateLocalPort indicates an expected call of AllocateLocalPort
func (mr *MockInterfaceMockRecorder) AllocateLocalPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateLocalPort", reflect.TypeOf((*MockInterface)(nil).AllocateLocalPort))
}

// NewTransportWithToken mocks base method
func (m *MockInterface) NewTransportWithToken(arg0 *rest.Config) (http.RoundTripper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransportWithToken", arg0)
	ret0, _ := ret[0].(http.RoundTripper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransportWithToken indicates an expected call of NewTransportWithToken
func (mr *MockInterfaceMockRecorder) NewTransportWithToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransportWithToken", reflect.TypeOf((*MockInterface)(nil).NewTransportWithToken), arg0)
}
